`factions/apps.py`
```
from django.apps import AppConfig


class FactionsConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'factions'
```

`factions/forms.py`
```
from django import forms
from .models import Game, Project

class GameForm(forms.ModelForm):
    class Meta:
        model = Game
        fields = ['name', 'description']
        widgets = {
            'name': forms.TextInput(attrs={'class': 'form-control', 'placeholder': 'Enter game name'}),
            'description': forms.Textarea(attrs={'class': 'form-control', 'placeholder': 'Enter game description'}),
        }

class ProjectForm(forms.ModelForm):
    length = forms.TypedChoiceField(
        choices=[(i, str(i)) for i in [2, 4, 6, 8, 10, 12, 16, 20]],
        coerce=int,
        initial=4,
        label='Total Length'
    )

    class Meta:
        model = Project
        fields = ['name', 'description', 'factions', 'length']
        widgets = {
            'factions': forms.CheckboxSelectMultiple(),
        }
```

`factions/models.py`
```
from django.db import models
from django.db.models import Max, Sum, F

class Game(models.Model):
    name = models.CharField(max_length=100)
    description = models.TextField()
    # Timestamps
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    
    def now(self):
        """Calculate the current time 'Now' by finding the max 'When' from sessions in this game."""
        latest_session = self.sessions.order_by('-when').first()
        return latest_session.when if latest_session else 0

    def latest_sessions(self, limit=5):
        """Return the latest sessions ordered by 'When' descending."""
        return self.sessions.order_by('-when')[:limit]

    def latest_events(self, limit=5):
        """Return the latest events ordered by 'When' descending."""
        return Event.objects.filter(game=self).order_by('-when')[:limit]

    def top_factions(self, limit=5):
        """Return the top factions based on the total length of all projects."""
        return Faction.objects.filter(game=self).annotate(
            total_project_length=Sum('projects__length')
        ).order_by('-total_project_length')[:limit]

    def top_projects(self, limit=5):
        """Return the top projects sorted by their progress percentage."""
        projects = list(self.projects.all())
        projects.sort(key=lambda project: project.progress_percentage(), reverse=True)
        return projects[:limit]

    def __str__(self):
        return self.name

class Session(models.Model):
    name = models.CharField(max_length=100)
    description = models.TextField()
    when = models.IntegerField()
    game = models.ForeignKey(Game, related_name='sessions', on_delete=models.CASCADE)
    # Timestamps
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    
    def __str__(self):
        return f"{self.name} (When: {self.when})"

class Faction(models.Model):
    name = models.CharField(max_length=100)
    description = models.TextField()
    tier = models.IntegerField()
    goals = models.TextField()
    leadership = models.TextField()
    values = models.TextField()
    history = models.TextField()
    game = models.ForeignKey(Game, related_name='factions', on_delete=models.CASCADE)
    # Timestamps
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    
    def active_projects(self):
        # Return projects where all clocks are not finished
        return self.projects.filter(finished__isnull=True).distinct()

    def completed_projects(self):
        # Return projects where all clocks are finished
        return self.projects.filter(finished__isnull=False).distinct()
    
    def total_clock_length(self):
        return self.projects.aggregate(total_length=Sum('length'))['total_length'] or 0

    def recent_events(self, limit=5):
        return Event.objects.filter(
            project_changes__project__factions=self
        ).distinct().order_by('-when')[:limit]

    def __str__(self):
        return self.name

class Project(models.Model):
    name = models.CharField(max_length=100)
    description = models.TextField()
    game = models.ForeignKey(Game, related_name='projects', on_delete=models.CASCADE)
    factions = models.ManyToManyField(Faction, related_name='projects')
    length = models.PositiveIntegerField(default=4)
    finished = models.IntegerField(null=True, blank=True, default=None)  # Allow NULL values
    # Timestamps
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    
    def progress_percentage(self):
        """Calculate the projectâ€™s progress as a percentage."""
        total_length = self.length or 1
        total_progress = self.calculate_progress()
        return (total_progress / total_length) * 100

    def calculate_progress(self):
        """Calculate the current progress of the project by summing related ProjectChange amounts."""
        return self.changes.aggregate(total_progress=Sum('amount'))['total_progress'] or 0

    def check_if_finished(self):
        """Mark the project as finished if progress meets or exceeds its length."""
        if self.calculate_progress() >= self.length and self.finished is None:
            latest_change = self.changes.order_by('-event__when').first()
            self.finished = latest_change.event.when if latest_change else 1
            self.save()

    def is_finished(self):
        """Check if the project is finished."""
        return self.finished is not None

    def __str__(self):
        return f"{self.name} ({self.calculate_progress()}/{self.length})"

class Event(models.Model):
    name = models.CharField(max_length=100)
    description = models.TextField()
    when = models.IntegerField()
    game = models.ForeignKey(Game, related_name='events', on_delete=models.CASCADE)
    # Timestamps
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    
    def __str__(self):
        return f"{self.name} (When: {self.when})"

class ProjectChange(models.Model):
    project = models.ForeignKey('Project', related_name='changes', on_delete=models.CASCADE)
    event = models.ForeignKey('Event', related_name='project_changes', on_delete=models.CASCADE)
    amount = models.IntegerField()
    # Timestamps
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    
    def __str__(self):
        return f"Change of {self.amount} to {self.project.name}"
```

`factions/urls.py`
```
from django.urls import path
from . import views

urlpatterns = [
    # Game URLs
    path('games/', views.GameListView.as_view(), name='game_list'),
    path('games/<int:pk>/', views.GameDetailView.as_view(), name='game_detail'),
    path('games/create/', views.GameCreateView.as_view(), name='game_create'),
    path('games/<int:pk>/edit/', views.GameUpdateView.as_view(), name='game_edit'),

    path('sessions/<int:game_id>', views.SessionListView.as_view(), name='session_list'),
    path('sessions/create/<int:game_id>', views.SessionCreateView.as_view(), name='session_create'),
    path('sessions/<int:pk>/<int:game_id>', views.SessionDetailView.as_view(), name='session_detail'),

    path('events/<int:game_id>', views.EventListView.as_view(), name='event_list'),
    path('events/create/<int:game_id>', views.EventCreateView.as_view(), name='event_create'),
    path('events/<int:pk>/<int:game_id>', views.EventDetailView.as_view(), name='event_detail'),

    path('factions/<int:game_id>', views.FactionListView.as_view(), name='faction_list'),
    path('factions/create/<int:game_id>', views.FactionCreateView.as_view(), name='faction_create'),
    path('factions/<int:pk>/<int:game_id>', views.FactionDetailView.as_view(), name='faction_detail'),
    path('factions/edit/<int:pk>/<int:game_id>', views.FactionUpdateView.as_view(), name='faction_update'),
    path('factions/delete/<int:pk>/<int:game_id>', views.FactionDeleteView.as_view(), name='faction_delete'),

    path('projects/<int:game_id>/', views.ProjectListView.as_view(), name='project_list'),
    path('projects/create/<int:game_id>/', views.ProjectCreateView.as_view(), name='project_create'),
    path('projects/<int:pk>/<int:game_id>/', views.ProjectDetailView.as_view(), name='project_detail'),
    path('projects/edit/<int:pk>/<int:game_id>/', views.ProjectUpdateView.as_view(), name='project_update'),
    path('projects/delete/<int:pk>/<int:game_id>/', views.ProjectDeleteView.as_view(), name='project_delete'),

    # Import Test Data URL
    path('import-test-data/', views.import_test_data, name='import_test_data'),
]
```

`factions/views.py`
```
from django.shortcuts import get_object_or_404, redirect, render
from django.views.generic import ListView, DetailView, CreateView, UpdateView, DeleteView
from .models import Game, Session, Event, Faction, Project, ProjectChange
from .forms import GameForm, ProjectForm
from django.urls import reverse_lazy, reverse
from django.db.models import Sum
import yaml
import os
from django.contrib import messages
from .utils import load_yaml_file

# Games
class GameListView(ListView):
    model = Game
    template_name = 'game/game_list.html'
    context_object_name = 'games'

class GameDetailView(DetailView):
    model = Game
    template_name = 'game/game_detail.html'
    context_object_name = 'game'

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        game = self.object

        # Using model helper methods to get the dynamic data
        context['latest_sessions'] = game.latest_sessions()
        context['latest_events'] = game.latest_events()
        context['top_factions'] = game.top_factions()
        context['top_projects'] = game.top_projects()
        context['now'] = game.now()
        return context

class GameCreateView(CreateView):
    model = Game
    fields = ['name', 'description']
    template_name = 'game/game_form.html'
    success_url = reverse_lazy('game_list')

class GameUpdateView(UpdateView):
    model = Game
    fields = ['name', 'description']
    template_name = 'game/game_form.html'
    success_url = reverse_lazy('game_list')

    def form_valid(self, form):
        # Implementing deletion functionality
        if "delete" in self.request.POST:
            self.object.delete()
            return redirect(self.success_url)
        return super().form_valid(form)

class GameDeleteView(DeleteView):
    model = Game
    template_name = 'game/game_confirm_delete.html'
    success_url = reverse_lazy('game_list')

# Factions
class FactionListView(ListView):
    model = Faction
    template_name = 'faction/faction_list.html'
    context_object_name = 'factions'

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context['game'] = Game.objects.get(id=self.kwargs['game_id'])
        return context

    def get_queryset(self):
        factions = Faction.objects.filter(game_id=self.kwargs['game_id'])
        factions = factions.annotate(total_project_length=Sum('projects__length'))
        factions = factions.order_by('-total_project_length')
        return factions

class FactionDetailView(DetailView):
    model = Faction
    template_name = 'faction/faction_detail.html'
    context_object_name = 'faction'

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context['game'] = Game.objects.get(id=self.kwargs['game_id'])
        # Add recent events
        context['recent_events'] = self.get_recent_events()
        return context

    def get_recent_events(self):
        faction = self.get_object()
        recent_events = Event.objects.filter(
            project_changes__project__factions=faction
        ).distinct().order_by('-when')[:5]
        return recent_events

class FactionCreateView(CreateView):
    model = Faction
    fields = ['name', 'description', 'tier', 'goals', 'leadership', 'values', 'history']
    template_name = 'faction/faction_form.html'

    def get_success_url(self):
        return reverse('faction_list', kwargs={'game_id': self.kwargs['game_id']})

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context['game'] = Game.objects.get(id=self.kwargs['game_id'])
        return context

    def form_valid(self, form):
        form.instance.game_id = self.kwargs['game_id']
        return super().form_valid(form)

class FactionUpdateView(UpdateView):
    model = Faction
    fields = ['name', 'description', 'tier', 'goals', 'leadership', 'values', 'history']
    template_name = 'faction/faction_form.html'

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context['game'] = Game.objects.get(id=self.kwargs['game_id'])
        return context

    def form_valid(self, form):
        form.instance.game_id = self.kwargs['game_id']
        return super().form_valid(form)

    def get_success_url(self):
        return reverse('faction_list', kwargs={'game_id': self.kwargs['game_id']})

class FactionDeleteView(DeleteView):
    model = Faction
    template_name = 'faction/faction_confirm_delete.html'

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context['game'] = Game.objects.get(id=self.kwargs['game_id'])
        return context

    def get_success_url(self):
        return reverse('faction_list', kwargs={'game_id': self.kwargs['game_id']})

# Sessions
class SessionListView(ListView):
    model = Session
    template_name = 'session/session_list.html'
    context_object_name = 'sessions'

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        game = Game.objects.get(id=self.kwargs['game_id'])
        context['game'] = game
        return context

    def get_queryset(self):
        sessions = Session.objects.filter(game_id=self.kwargs['game_id']).order_by('-when')
        return sessions

class SessionCreateView(CreateView):
    model = Session
    template_name = 'session/session_form.html'
    fields = ['name', 'description', 'when']

    def form_valid(self, form):
        form.instance.game_id = self.kwargs['game_id']
        return super().form_valid(form)

    def get_success_url(self):
        return reverse('session_list', kwargs={'game_id': self.kwargs['game_id']})

class SessionDetailView(DetailView):
    model = Session
    template_name = 'session/session_detail.html'
    context_object_name = 'session'

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context['game'] = self.object.game
        return context

# Events
class EventListView(ListView):
    model = Event
    template_name = 'event/event_list.html'
    context_object_name = 'events'

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        game = Game.objects.get(id=self.kwargs['game_id'])
        context['game'] = game
        return context

    def get_queryset(self):
        events = Event.objects.filter(game_id=self.kwargs['game_id']).order_by('-when')
        return events

class EventCreateView(CreateView):
    model = Event
    template_name = 'event/event_form.html'
    fields = ['name', 'description', 'when']

    def form_valid(self, form):
        form.instance.game_id = self.kwargs['game_id']
        return super().form_valid(form)

    def get_success_url(self):
        return reverse('event_list', kwargs={'game_id': self.kwargs['game_id']})

class EventDetailView(DetailView):
    model = Event
    template_name = 'event/event_detail.html'
    context_object_name = 'event'

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context['game'] = self.object.game
        return context

# Projects
class ProjectListView(ListView):
    model = Project
    template_name = 'project/project_list.html'
    context_object_name = 'projects'

    def get_queryset(self):
        game = get_object_or_404(Game, id=self.kwargs['game_id'])
        projects = Project.objects.filter(game=game)
        # Filter by Faction if provided
        faction_id = self.request.GET.get('faction')
        if faction_id:
            projects = projects.filter(factions__id=faction_id)
        # Filter by completed status
        show_completed = self.request.GET.get('show_completed', 'on')
        if show_completed != 'on':
            projects = projects.filter(finished__isnull=True)
        # Annotate with progress percentage
        projects = list(projects.distinct())
        projects.sort(key=lambda p: p.progress_percentage(), reverse=True)
        return projects

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        game = get_object_or_404(Game, id=self.kwargs['game_id'])
        context['game'] = game
        context['factions'] = Faction.objects.filter(game=game)
        context['selected_faction'] = self.request.GET.get('faction', '')
        context['show_completed'] = self.request.GET.get('show_completed', 'on')
        return context

class ProjectDetailView(DetailView):
    model = Project
    template_name = 'project/project_detail.html'
    context_object_name = 'project'

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        project = self.object
        context['game'] = project.game
        # Calculate progress
        context['progress_percentage'] = project.progress_percentage()
        # Get all events affecting the project
        events = Event.objects.filter(
            project_changes__project=project
        ).distinct().order_by('-when')
        context['events'] = events
        return context

class ProjectCreateView(CreateView):
    model = Project
    form_class = ProjectForm
    template_name = 'project/project_form.html'

    def get_success_url(self):
        return reverse('project_detail', kwargs={'pk': self.object.pk, 'game_id': self.object.game.id})

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        game = Game.objects.get(id=self.kwargs['game_id'])
        context['game'] = game
        context['factions'] = Faction.objects.filter(game=game)
        # Pre-select faction if passed in URL
        faction_id = self.request.GET.get('faction_id')
        if faction_id:
            context['form'].fields['factions'].initial = [faction_id]
        return context

    def form_valid(self, form):
        game = Game.objects.get(id=self.kwargs['game_id'])
        form.instance.game = game
        response = super().form_valid(form)
        # Associate factions
        factions = form.cleaned_data.get('factions')
        if factions:
            form.instance.factions.set(factions)
        else:
            form.instance.factions.clear()
        return response

class ProjectUpdateView(UpdateView):
    model = Project
    form_class = ProjectForm
    template_name = 'project/project_form.html'

    def get_success_url(self):
        return reverse('project_detail', kwargs={'pk': self.object.pk, 'game_id': self.object.game.id})

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        game = self.object.game
        context['game'] = game
        context['factions'] = Faction.objects.filter(game=game)
        return context

class ProjectDeleteView(DeleteView):
    model = Project
    template_name = 'project/project_confirm_delete.html'

    def get_success_url(self):
        return reverse('project_list', kwargs={'game_id': self.object.game.id})

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context['game'] = self.object.game
        return context

# Import Test Data
def import_test_data(request):
    data_directory = os.path.join(os.path.dirname(__file__), 'data')

    # Import Games
    game_directory = os.path.join(data_directory, 'game')
    if os.path.exists(game_directory):
        for filename in os.listdir(game_directory):
            if filename.endswith('.yaml'):
                file_path = os.path.join(game_directory, filename)
                data = load_yaml_file(file_path)

                if isinstance(data, list):
                    for item_data in data:
                        Game.objects.update_or_create(
                            name=item_data['name'],
                            defaults={
                                'description': item_data.get('description', ''),
                            }
                        )
                else:
                    Game.objects.update_or_create(
                        name=data['name'],
                        defaults={
                            'description': data.get('description', ''),
                        }
                    )

    # Import Factions
    faction_directory = os.path.join(data_directory, 'faction')
    if os.path.exists(faction_directory):
        for filename in os.listdir(faction_directory):
            if filename.endswith('.yaml'):
                file_path = os.path.join(faction_directory, filename)
                data = load_yaml_file(file_path)

                if isinstance(data, list):
                    for item_data in data:
                        game_name = item_data.pop('game', None)
                        game = Game.objects.get(name=game_name) if game_name else None

                        Faction.objects.update_or_create(
                            name=item_data['name'],
                            game=game,
                            defaults={
                                'description': item_data.get('description', ''),
                                'tier': item_data.get('tier', 0),
                                'goals': item_data.get('goals', ''),
                                'leadership': item_data.get('leadership', ''),
                                'values': item_data.get('values', ''),
                                'history': item_data.get('history', ''),
                            }
                        )
                else:
                    game_name = data.pop('game', None)
                    game = Game.objects.get(name=game_name) if game_name else None

                    Faction.objects.update_or_create(
                        name=data['name'],
                        game=game,
                        defaults={
                            'description': data.get('description', ''),
                            'tier': data.get('tier', 0),
                            'goals': data.get('goals', ''),
                            'leadership': data.get('leadership', ''),
                            'values': data.get('values', ''),
                            'history': data.get('history', ''),
                        }
                    )

    # Import Projects
    project_directory = os.path.join(data_directory, 'project')
    if os.path.exists(project_directory):
        for filename in os.listdir(project_directory):
            if filename.endswith('.yaml'):
                file_path = os.path.join(project_directory, filename)
                data = load_yaml_file(file_path)

                if isinstance(data, list):
                    for item_data in data:
                        game_name = item_data.pop('game', None)
                        game = Game.objects.get(name=game_name) if game_name else None

                        faction_names = item_data.pop('factions', [])
                        factions = Faction.objects.filter(name__in=faction_names, game=game)

                        project, created = Project.objects.update_or_create(
                            name=item_data['name'],
                            game=game,
                            defaults={
                                'description': item_data.get('description', ''),
                                'length': item_data.get('length', 4),
                                'finished': item_data.get('finished', None),
                            }
                        )
                        project.factions.set(factions)
                else:
                    game_name = data.pop('game', None)
                    game = Game.objects.get(name=game_name) if game_name else None

                    faction_names = data.pop('factions', [])
                    factions = Faction.objects.filter(name__in=faction_names, game=game)

                    project, created = Project.objects.update_or_create(
                        name=data['name'],
                        game=game,
                        defaults={
                            'description': data.get('description', ''),
                            'length': data.get('length', 4),
                            'finished': data.get('finished', None),
                        }
                    )
                    project.factions.set(factions)

    # Import Sessions
    session_directory = os.path.join(data_directory, 'session')
    if os.path.exists(session_directory):
        for filename in os.listdir(session_directory):
            if filename.endswith('.yaml'):
                file_path = os.path.join(session_directory, filename)
                data = load_yaml_file(file_path)

                if isinstance(data, list):
                    for item_data in data:
                        game_name = item_data.pop('game', None)
                        game = Game.objects.get(name=game_name) if game_name else None

                        Session.objects.update_or_create(
                            name=item_data['name'],
                            game=game,
                            when=item_data.get('when', 0),
                            defaults={
                                'description': item_data.get('description', ''),
                            }
                        )
                else:
                    game_name = data.pop('game', None)
                    game = Game.objects.get(name=game_name) if game_name else None

                    Session.objects.update_or_create(
                        name=data['name'],
                        game=game,
                        when=data.get('when', 0),
                        defaults={
                            'description': data.get('description', ''),
                        }
                    )

    # Import Events
    event_directory = os.path.join(data_directory, 'event')
    if os.path.exists(event_directory):
        for filename in os.listdir(event_directory):
            if filename.endswith('.yaml'):
                file_path = os.path.join(event_directory, filename)
                data = load_yaml_file(file_path)

                if isinstance(data, list):
                    for item_data in data:
                        game_name = item_data.pop('game', None)
                        game = Game.objects.get(name=game_name) if game_name else None

                        Event.objects.update_or_create(
                            name=item_data['name'],
                            game=game,
                            when=item_data.get('when', 0),
                            defaults={
                                'description': item_data.get('description', ''),
                            }
                        )
                else:
                    game_name = data.pop('game', None)
                    game = Game.objects.get(name=game_name) if game_name else None

                    Event.objects.update_or_create(
                        name=data['name'],
                        game=game,
                        when=data.get('when', 0),
                        defaults={
                            'description': data.get('description', ''),
                        }
                    )

    # Import ProjectChanges
    project_change_directory = os.path.join(data_directory, 'projectchange')
    if os.path.exists(project_change_directory):
        for filename in os.listdir(project_change_directory):
            if filename.endswith('.yaml'):
                file_path = os.path.join(project_change_directory, filename)
                data = load_yaml_file(file_path)

                if isinstance(data, list):
                    for item_data in data:
                        project_name = item_data.pop('project', None)
                        event_name = item_data.pop('event', None)
                        game_name = item_data.pop('game', None)

                        game = Game.objects.get(name=game_name) if game_name else None
                        project = Project.objects.get(name=project_name, game=game)
                        event = Event.objects.get(name=event_name, game=game)

                        ProjectChange.objects.update_or_create(
                            project=project,
                            event=event,
                            defaults={
                                'amount': item_data.get('amount', 0),
                            }
                        )
                else:
                    project_name = data.pop('project', None)
                    event_name = data.pop('event', None)
                    game_name = data.pop('game', None)

                    game = Game.objects.get(name=game_name) if game_name else None
                    project = Project.objects.get(name=project_name, game=game)
                    event = Event.objects.get(name=event_name, game=game)

                    ProjectChange.objects.update_or_create(
                        project=project,
                        event=event,
                        defaults={
                            'amount': data.get('amount', 0),
                        }
                    )

    messages.success(request, 'Successfully imported test data.')
    return redirect('game_list')
```

`factions/static/factions/css/base.css`
```
/* base.css */

/* Theme Colors */
:root {
    --dark-blue: #2A3E5F;
    --light-blue: #3C6E8F;
    --accent-blue: #4A89A8;
    --text-light: #FFFFFF;
    --bg-light: #F0F4F8;
  }
  
  /* Body and Font Adjustments */
  body {
    font-family: Arial, sans-serif;
    background-color: var(--bg-light);
    color: var(--dark-blue);
  }
  
  /* Navbar Customization */
  .navbar {
    background-color: var(--dark-blue) !important;
  }
  
  .navbar-brand {
    color: var(--text-light) !important;
  }
  
  .navbar-light .navbar-nav .nav-link {
    color: var(--text-light) !important;
  }
  
  .navbar-light .navbar-nav .nav-link:hover {
    color: var(--accent-blue) !important;
  }
  
  /* Header Styles */
  h1, h2, h3 {
    color: var(--dark-blue);
  }
  
  h1 {
    font-size: 2.5rem;
  }
  
  h2 {
    font-size: 1.75rem;
    color: var(--light-blue);
  }
  
  /* Buttons */
  .btn-primary {
    background-color: var(--accent-blue);
    border-color: var(--accent-blue);
    color: var(--text-light);
  }
  
  .btn-primary:hover {
    background-color: var(--dark-blue);
    border-color: var(--dark-blue);
  }
  
  /* Feed Layout for Game Detail Page */
  .game-grid {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 20px;
  }
  
  .feed-container {
    background-color: var(--light-blue);
    color: var(--text-light);
    border: 1px solid var(--accent-blue);
    padding: 20px;
    border-radius: 8px;
    min-height: 200px;
  }
  
  /* Icon Link for Feed Titles */
  .icon-link {
    color: var(--text-light);
    margin-left: 10px;
    font-size: 1.2em;
  }
  
  .icon-link:hover {
    color: var(--accent-blue);
  }
  
  /* Footer */
  footer {
    background-color: var(--dark-blue);
    color: var(--text-light);
    text-align: center;
    padding: 10px 0;
    position: fixed;
    width: 100%;
    bottom: 0;
  }

  /* Feed Table Styling */
.feed-table {
    width: 100%;
    border-collapse: collapse;
    margin-top: 20px;
    border: 2px solid var(--accent-blue); /* Table border */
  }
  
  .feed-table td {
    width: 50%; /* Each cell takes half the width of the table */
    padding: 20px;
    vertical-align: top;
    border: 1px solid var(--accent-blue); /* Border between cells */
  }
  
  .feed-cell {
    background-color: var(--light-blue);
    color: var(--text-light);
    border-radius: 8px;
  }
  
  /* Title and Icon Link Styling for Each Feed */
  .feed-cell h2 {
    display: flex;
    align-items: center;
    justify-content: space-between;
    color: var(--text-light);
  }
  
  .icon-link {
    color: var(--text-light);
    margin-left: 10px;
    font-size: 1.2em;
  }
  
  .icon-link:hover {
    color: var(--accent-blue);
  }
  
  /* List Styling within Feed Cells */
  .feed-cell ul {
    list-style-type: none;
    padding: 0;
    margin-top: 10px;
  }
  
  .feed-cell ul li {
    margin-bottom: 8px;
  }
  
  .feed-cell a {
    color: var(--text-light);
    text-decoration: none;
  }
  
  .feed-cell a:hover {
    text-decoration: underline;
  }
  
  /* Styles for the project list and detail views */
.card {
  border: 1px solid var(--accent-blue);
  border-radius: 8px;
}

.card-body {
  padding: 20px;
}

.card h3 {
  color: var(--dark-blue);
}

.form-inline .form-control {
  margin-right: 10px;
}

.form-inline .form-check {
  margin-right: 10px;
}
```

`factions/templates/base.html`
```
<!DOCTYPE html>
<html lang="en">
<head>
    {% load static %}
    <meta charset="UTF-8">
    <title>{% block title %}Faction Manager{% endblock %}</title>
    <!-- Bootstrap CSS -->
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
    <!-- Custom CSS -->
    <link rel="stylesheet" href="{% static 'factions/css/base.css' %}">
    {% block extra_head %}{% endblock %}
</head>
<body>
    <nav class="navbar navbar-expand-lg navbar-light bg-light">
        <a class="navbar-brand" href="{% url 'game_list' %}">Faction Manager</a>
        {% if game %}
        <div class="collapse navbar-collapse" id="navbarNav">
            <ul class="navbar-nav">
                <li class="nav-item">
                    <a class="nav-link" href="{% url 'game_detail' game.id %}">{{ game }}</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="{% url 'faction_list' game.id %}">Factions</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="{% url 'project_list' game.id %}">Projects</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="{% url 'session_list' game.id %}">Sessions</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="{% url 'event_list' game.id %}">Events</a>
                </li>
            </ul>
        </div>
        {% endif %}
    </nav>
    <div class="container mt-4">
        {% block content %}{% endblock %}
    </div>
    <!-- Bootstrap JS and dependencies -->
    <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.9.3/dist/umd/popper.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
    {% block extra_js %}{% endblock %}
</body>
</html>
```

`factions/templates/faction/faction_list.html`
```
{% extends "base.html" %}

{% block title %}Factions{% endblock %}

{% block content %}
<div class="container mt-5">
    <h1 class="mb-4">Factions in {{ game.name }}</h1>
    <a href="{% url 'faction_create' game.id %}" class="btn btn-primary mb-4">Add New Faction</a>
    {% for faction in factions %}
    <div class="card mb-4">
        <div class="card-body">
            <a href="{% url 'faction_detail' faction.id game.id %}" style="text-decoration: none; color: inherit;">
                <div class="row">
                    <!-- Left Side -->
                    <div class="col-md-4">
                        <h3>{{ faction.name }}</h3>
                        <p class="text-muted" style="font-style: italic;">{{ faction.description|truncatewords:20 }}</p>
                    </div>
                    <!-- Middle -->
                    <div class="col-md-4">
                        <h4>Active Projects</h4>
                        {% for project in faction.active_projects %}
                            <p><strong>{{ project }}</strong></p>
                        {% empty %}
                            <p>No active projects.</p>
                        {% endfor %}
                    </div>
                    <!-- Right -->
                    <div class="col-md-4">
                        <h4>Finished Projects</h4>
                        {% for project in faction.completed_projects %}
                            <p><strong>{{ project.name }}</strong></p>
                            {% if project.description %}
                                <p>{{ project.description|truncatewords:10 }}</p>
                            {% endif %}
                        {% endfor %}
                    </div>
                </div>
            </a>
        </div>
    </div>
    {% empty %}
    <p class="text-muted">No factions available. Click "Add New Faction" to add one.</p>
    {% endfor %}
</div>
{% endblock %}
```

`factions/templates/faction/faction_detail.html`
```
{% extends "base.html" %}

{% block title %}{{ faction.name }}{% endblock %}

{% block content %}
<div class="container mt-5">
    <!-- Faction Name and Edit Button -->
    <div class="d-flex justify-content-between align-items-center">
        <h1>{{ faction.name }}</h1>
        <a href="{% url 'faction_update' faction.id game.id %}" class="btn btn-secondary">Edit Faction</a>
    </div>
    <div class="row mt-4">
        <!-- Left Column -->
        <div class="col-md-6">
            <!-- Tabbed Content -->
            <ul class="nav nav-tabs" id="factionTab" role="tablist">
                <!-- (Tabs code remains the same) -->
                <!-- ... -->
            </ul>
            <div class="tab-content" id="factionTabContent">
                <!-- (Tab panes code remains the same) -->
                <!-- ... -->
            </div>
            <!-- Recent Events -->
            <h3 class="mt-5">Recent Events</h3>
            <ul class="list-group">
                {% for event in recent_events %}
                <li class="list-group-item">
                    <a href="{% url 'event_detail' event.id game.id %}">{{ event.name }} (When: {{ event.when }})</a>
                </li>
                {% empty %}
                <li class="list-group-item">No recent events.</li>
                {% endfor %}
            </ul>
        </div>
        <!-- Right Column -->
        <div class="col-md-6">
            <div class="card">
                <div class="card-body">
                    <h3>Projects</h3>
                    <!-- Add New Project Button -->
                    <a href="{% url 'project_create' game.id %}?faction_id={{ faction.id }}" class="btn btn-primary mb-3">Add New Project</a>
                    <!-- Active Projects -->
                    <h4>Active Projects</h4>
                    {% for project in faction.active_projects %}
                        <div class="card mb-3">
                            <div class="card-body">
                                <h5>
                                    <a href="{% url 'project_detail' project.id game.id %}">{{ project }}</a>
                                </h5>
                                {% if project.description %}
                                    <p>{{ project.description }}</p>
                                {% endif %}
                            </div>
                        </div>
                    {% empty %}
                        <p>No active projects.</p>
                    {% endfor %}
                    <!-- Completed Projects -->
                    <h4>Completed Projects</h4>
                    {% for project in faction.completed_projects %}
                        <div class="card mb-3">
                            <div class="card-body">
                                <h5>
                                    <a href="{% url 'project_detail' project.id game.id %}">{{ project.name }}</a>
                                </h5>
                                {% if project.description %}
                                    <p>{{ project.description }}</p>
                                {% endif %}
                            </div>
                        </div>
                    {% empty %}
                        <p>No completed projects.</p>
                    {% endfor %}
                </div>
            </div>
        </div>
    </div>
</div>
{% endblock %}
```

`factions/templates/faction/faction_form.html`
```
{% extends "base.html" %}

{% block title %}{{ view.object.pk|yesno:"Edit Faction,Create Faction" }}{% endblock %}

{% block content %}
<div class="container mt-5">
    <h1 class="mb-4">{{ view.object.pk|yesno:"Edit Faction,Create New Faction" }}</h1>
    <form method="post" novalidate>
        {% csrf_token %}
        <div class="form-group mb-3">
            {{ form.name.label_tag }} {{ form.name }}
        </div>
        <div class="form-group mb-4">
            {{ form.description.label_tag }} {{ form.description }}
        </div>
        <div class="form-group mb-3">
            {{ form.tier.label_tag }} {{ form.tier }}
        </div>
        <div class="form-group mb-3">
            {{ form.goals.label_tag }} {{ form.goals }}
        </div>
        <div class="form-group mb-3">
            {{ form.leadership.label_tag }} {{ form.leadership }}
        </div>
        <div class="form-group mb-3">
            {{ form.values.label_tag }} {{ form.values }}
        </div>
        <div class="form-group mb-3">
            {{ form.history.label_tag }} {{ form.history }}
        </div>
        <button type="submit" class="btn btn-success">Save</button>
        <a href="{% url 'faction_list' game_id=game.id %}" class="btn btn-secondary">Cancel</a>
    </form>
</div>
{% endblock %}
```

`factions/templates/faction/faction_confirm_delete.html`
```
{% extends "base.html" %}

{% block title %}Delete Faction{% endblock %}

{% block content %}
<div class="container mt-5">
    <h1>Delete Faction</h1>
    <p>Are you sure you want to delete the faction "<strong>{{ faction.name }}</strong>"? This action cannot be undone.</p>
    
    <form method="post">
        {% csrf_token %}
        <button type="submit" class="btn btn-danger">Delete</button>
        <a href="{% url 'faction_detail' game_id=game.id pk=faction.id %}" class="btn btn-secondary">Cancel</a>
    </form>
</div>
{% endblock %}
```

`factions/templates/game/game_list.html`
```
{% extends "base.html" %}

{% block title %}Games{% endblock %}

{% block content %}
<div class="container mt-5">
    <h1 class="mb-4">Games</h1>
    <a href="{% url 'game_create' %}" class="btn btn-primary mb-4">Create New Game</a>
    <div class="list-group">
        {% for game in games %}
            <a href="{% url 'game_detail' game.id %}" class="list-group-item list-group-item-action">
                <h5 class="mb-1">{{ game.name }}</h5>
                <p class="mb-1">{{ game.description|truncatewords:20 }}</p>
                <small>Last modified: {{ game.last_modified|date:"Y-m-d H:i" }}</small>
            </a>
        {% empty %}
            <p class="text-muted">No games available. Click "Create New Game" to add one.</p>
        {% endfor %}
    </div>
</div>
{% endblock %}
```

`factions/templates/game/game_detail.html`
```
<!-- templates/game/game_detail.html -->

{% extends "base.html" %}

{% block title %}{{ game.name }}{% endblock %}

{% block content %}
<div class="container mt-5">
    <!-- Game Name and Edit Button -->
    <div class="d-flex justify-content-between align-items-center">
        <h1>{{ game.name }}</h1>
        <a href="{% url 'game_edit' game.pk %}" class="btn btn-secondary">Edit Game</a>
    </div>
    <p class="mt-3">{{ game.description }}</p>
    <p><strong>Time Now:</strong> {{ now }}</p>
    <!-- Feeds -->
    <div class="row mt-4">
        <!-- Factions Feed -->
        <div class="col-md-6">
            <div class="card mb-4">
                <div class="card-body">
                    <h2 class="card-title">
                        Factions
                        <a href="{% url 'faction_create' game.pk %}" class="btn btn-sm btn-primary float-right">Add Faction</a>
                    </h2>
                    <ul class="list-group list-group-flush">
                        {% for faction in top_factions %}
                            <li class="list-group-item">
                                <a href="{% url 'faction_detail' faction.pk game.pk %}">{{ faction }}</a>
                            </li>
                        {% empty %}
                            <li class="list-group-item">No factions available.</li>
                        {% endfor %}
                    </ul>
                    <a href="{% url 'faction_list' game.pk %}" class="btn btn-link mt-2">View All Factions</a>
                </div>
            </div>
        </div>
        <!-- Projects Feed -->
        <div class="col-md-6">
            <div class="card mb-4">
                <div class="card-body">
                    <h2 class="card-title">
                        Projects
                        <a href="{% url 'project_create' game.pk %}" class="btn btn-sm btn-primary float-right">Add Project</a>
                    </h2>
                    <ul class="list-group list-group-flush">
                        {% for project in top_projects %}
                            <li class="list-group-item">
                                <a href="{% url 'project_detail' project.pk game.pk %}">{{ project }}</a>
                            </li>
                        {% empty %}
                            <li class="list-group-item">No projects available.</li>
                        {% endfor %}
                    </ul>
                    <a href="{% url 'project_list' game.pk %}" class="btn btn-link mt-2">View All Projects</a>
                </div>
            </div>
        </div>
    </div>
    <div class="row">
        <!-- Sessions Feed -->
        <div class="col-md-6">
            <div class="card mb-4">
                <div class="card-body">
                    <h2 class="card-title">
                        Sessions
                        <a href="{% url 'session_create' game.pk %}" class="btn btn-sm btn-primary float-right">Add Session</a>
                    </h2>
                    <ul class="list-group list-group-flush">
                        {% for session in latest_sessions %}
                            <li class="list-group-item">
                                <a href="{% url 'session_detail' session.pk game.pk %}">{{ session.name }}</a>
                            </li>
                        {% empty %}
                            <li class="list-group-item">No recent sessions available.</li>
                        {% endfor %}
                    </ul>
                    <a href="{% url 'session_list' game.pk %}" class="btn btn-link mt-2">View All Sessions</a>
                </div>
            </div>
        </div>
        <!-- Events Feed -->
        <div class="col-md-6">
            <div class="card mb-4">
                <div class="card-body">
                    <h2 class="card-title">
                        Events
                        <a href="{% url 'event_create' game.pk %}" class="btn btn-sm btn-primary float-right">Add Event</a>
                    </h2>
                    <ul class="list-group list-group-flush">
                        {% for event in latest_events %}
                            <li class="list-group-item">
                                <a href="{% url 'event_detail' event.pk game.pk %}">{{ event }}</a>
                            </li>
                        {% empty %}
                            <li class="list-group-item">No recent events available.</li>
                        {% endfor %}
                    </ul>
                    <a href="{% url 'event_list' game.pk %}" class="btn btn-link mt-2">View All Events</a>
                </div>
            </div>
        </div>
    </div>
</div>
{% endblock %}
```

`factions/templates/game/game_form.html`
```
<!-- templates/game/game_form.html -->

{% extends "base.html" %}
{% block content %}
  <h1>{% if form.instance.pk %}Edit Game{% else %}Create Game{% endif %}</h1>
  <form method="post">
    {% csrf_token %}
    {{ form.as_p }}
    <button type="submit" class="btn btn-primary">Save</button>
    {% if form.instance.pk %}
      <button type="submit" name="delete" class="btn btn-danger">Delete</button>
    {% endif %}
  </form>
{% endblock %}
```

`factions/templates/game/game_confirm_delete.html`
```
{% extends "base.html" %}

{% block title %}Delete Game{% endblock %}

{% block content %}
<div class="container mt-5">
    <h1>Delete Game</h1>
    <p>Are you sure you want to delete the game "<strong>{{ game.name }}</strong>"? This action cannot be undone.</p>
    
    <form method="post">
        {% csrf_token %}
        <button type="submit" class="btn btn-danger">Delete</button>
        <a href="{% url 'game_detail' game.id %}" class="btn btn-secondary">Cancel</a>
    </form>
</div>
{% endblock %}
```

`factions/templates/project/project_list.html`
```
{% extends "base.html" %}

{% block title %}Projects{% endblock %}

{% block content %}
<div class="container mt-5">
    <h1 class="mb-4">Projects in {{ game.name }}</h1>
    <!-- Filters -->
    <form method="get" class="form-inline mb-4">
        <label for="faction" class="mr-2">Filter by Faction:</label>
        <select name="faction" id="faction" class="form-control mr-4">
            <option value="">All</option>
            {% for faction in factions %}
                <option value="{{ faction.id }}" {% if selected_faction == faction.id|stringformat:"s" %}selected{% endif %}>{{ faction.name }}</option>
            {% endfor %}
        </select>
        <div class="form-check mr-4">
            <input class="form-check-input" type="checkbox" name="show_completed" id="show_completed" {% if show_completed == 'on' %}checked{% endif %}>
            <label class="form-check-label" for="show_completed">
                Show Completed Projects
            </label>
        </div>
        <button type="submit" class="btn btn-primary">Apply Filters</button>
    </form>
    <!-- Project List -->
    {% for project in projects %}
    <div class="card mb-4">
        <div class="card-body">
            <a href="{% url 'project_detail' project.id game.id %}" style="text-decoration: none; color: inherit;">
                <div class="d-flex justify-content-between">
                    <h3>{{ project.name }}</h3>
                    <p><strong>Progress:</strong> {{ project.progress_percentage|floatformat:2 }}%</p>
                </div>
                <p class="text-muted">{{ project.description|truncatewords:20 }}</p>
                <p><strong>Associated Factions:</strong>
                    {% for faction in project.factions.all %}
                        <a href="{% url 'faction_detail' faction.id game.id %}">{{ faction.name }}</a>{% if not forloop.last %}, {% endif %}
                    {% endfor %}
                </p>
            </a>
        </div>
    </div>
    {% empty %}
    <p class="text-muted">No projects available.</p>
    {% endfor %}
</div>
{% endblock %}
```

`factions/templates/project/project_detail.html`
```
{% extends "base.html" %}

{% block title %}{{ project.name }}{% endblock %}

{% block content %}
<div class="container mt-5">
    <!-- Project Name and Edit Button -->
    <div class="d-flex justify-content-between align-items-center">
        <h1>{{ project.name }}</h1>
        <div>
            <a href="{% url 'project_update' project.id game.id %}" class="btn btn-secondary">Edit Project</a>
            <a href="{% url 'project_delete' project.id game.id %}" class="btn btn-danger">Delete Project</a>
        </div>
    </div>
    <p class="mt-3">{{ project.description }}</p>
    <p><strong>Associated Factions:</strong>
        {% for faction in project.factions.all %}
            <a href="{% url 'faction_detail' faction.id game.id %}">{{ faction.name }}</a>{% if not forloop.last %}, {% endif %}
        {% endfor %}
    </p>
    <p><strong>Progress:</strong> {{ progress_percentage|floatformat:2 }}%</p>
    <!-- Project Progress -->
    <h3 class="mt-5">Progress Details</h3>
    <p>
        <strong>{{ project.name }} Progress:</strong>
        {{ project.calculate_progress }}/{{ project.length }}
    </p>
    <!-- Events Affecting the Project -->
    <h3 class="mt-5">Events Affecting This Project</h3>
    <ul class="list-group">
        {% for event in events %}
        <li class="list-group-item">
            <a href="{% url 'event_detail' event.id game.id %}">{{ event.name }} (When: {{ event.when }})</a>
        </li>
        {% empty %}
        <li class="list-group-item">No events affecting this project.</li>
        {% endfor %}
    </ul>
</div>
{% endblock %}
```

`factions/templates/project/project_form.html`
```
{% extends "base.html" %}
{% block content %}
<div class="container mt-5">
    <h1>{% if form.instance.pk %}Edit Project{% else %}Create Project{% endif %}</h1>
    <form method="post">
        {% csrf_token %}
        <div class="form-group">
            {{ form.name.label_tag }}
            {{ form.name }}
        </div>
        <div class="form-group">
            {{ form.description.label_tag }}
            {{ form.description }}
        </div>
        <div class="form-group">
            {{ form.factions.label_tag }}
            {{ form.factions }}
        </div>
        <div class="form-group">
            {{ form.length.label_tag }}
            {{ form.length }}
        </div>
        <button type="submit" class="btn btn-primary">Save</button>
    </form>
</div>
{% endblock %}
```

`factions/templates/project/project_confirm_delete.html`
```
{% extends "base.html" %}

{% block title %}Delete Project{% endblock %}

{% block content %}
<div class="container mt-5">
    <h1>Delete Project</h1>
    <p>Are you sure you want to delete the project "<strong>{{ project.name }}</strong>"? This action cannot be undone.</p>
    <form method="post">
        {% csrf_token %}
        <button type="submit" class="btn btn-danger">Delete</button>
        <a href="{% url 'project_detail' project.id game.id %}" class="btn btn-secondary">Cancel</a>
    </form>
</div>
{% endblock %}
```

